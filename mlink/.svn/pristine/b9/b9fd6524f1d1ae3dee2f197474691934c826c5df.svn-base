define(['module', 'exports', '../js/innerFrameMessageHandler'], function (module, exports, _innerFrameMessageHandler) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (options) {
        var AUTHENTICATION_STATE_CHANGED_MESSAGE = options.isLoggedInMessage || 'logged in',
            LOGGED_OUT_MESSAGE = options.isLoggedOutMessage || 'logged out',
            url,
            innerFrameMessageHandler = (options.InnerFrameMessageHandler || _innerFrameMessageHandler2.default)();

        function paramsAsMap(paramsStr) {
            var paramArray = paramsStr.split('&'),
                i,
                param,
                shouldBeSpace = /\+/g,
                parameters = {};

            for (i = 0; i < paramArray.length; i++) {
                param = paramArray[i].split('=');
                if (param.length === 2) {
                    parameters[param[0]] = decodeURIComponent(param[1].replace(shouldBeSpace, " "));
                }
            }
            return parameters;
        }

        function urlParameters(fullUrl) {
            var indexToStartOfParameters = fullUrl.indexOf('?'),
                hasParams = indexToStartOfParameters >= 0;

            if (hasParams) {
                return paramsAsMap(fullUrl.substr(indexToStartOfParameters + 1));
            }

            return {};
        }

        function sendResized() {
            innerFrameMessageHandler.sendResizedMessageToParent();
        }

        function displayToUser(content) {
            $('#output').empty().append(content);
            sendResized();
        }

        function renderTemplate(template) {
            return $(_handlebars2.default.compile(template)());
        }

        function showLoginScreen() {
            var message, widget;
            widget = makeLoginWidget({
                success: function success() {
                    innerFrameMessageHandler.sendMessageToParent(AUTHENTICATION_STATE_CHANGED_MESSAGE);
                    fetchDeepLinks(url);
                }
            });
            message = widget.domElement();
            message.find('a').attr('target', '_blank');
            displayToUser(message);
        }

        function showAdvertiserMessageScreen() {
            var message, widget;

            widget = makeLogoutWidget({
                success: function success() {
                    innerFrameMessageHandler.sendMessageToParent(AUTHENTICATION_STATE_CHANGED_MESSAGE);
                    showLoginScreen();
                }
            });
            message = widget.domElement();
            displayToUser(message);
            innerFrameMessageHandler.sendMessageToParent(AUTHENTICATION_STATE_CHANGED_MESSAGE);
        }

        function showLinkNotFound(error) {
            var domain = function domain(data) {
                var a = document.createElement('a');
                a.href = data;
                return a.hostname;
            },
                translatedError = _CONTENT2.default.getAndReplace(error.code, [domain(url)]),
                html = renderTemplate(_deepLinkNotFound2.default);

            html.find('.data').text(translatedError);
            displayToUser(html);
        }

        function fetchDeepLinks(url) {
            deepLinkService.fetchDeepLinks(url, function (data) {
                var linkFoundWidget = makeLinkFoundWidget({
                    url: url,
                    deepLinkData: data
                });
                displayToUser(linkFoundWidget.view());
            }, function (error) {
                switch (error.responseCode) {
                    case 404:
                        showLinkNotFound(error);
                        break;
                    case 401:
                        showLoginScreen();
                        break;
                    case 403:
                        showAdvertiserMessageScreen();
                        break;
                    default:
                        displayToUser(renderTemplate(_deepLinkError2.default));
                }
            });
        }

        innerFrameMessageHandler.registerHandler(function (message) {
            return message === "log out";
        }, function (message) {
            showLoginScreen();
        });

        return {
            start: function start(value) {
                url = urlParameters(value).url;
                if (url) {
                    sendResized();
                }
            },
            setDeepLinkService: function setDeepLinkService(value) {
                deepLinkService = value;
            }
        };
    };

    var _innerFrameMessageHandler2 = _interopRequireDefault(_innerFrameMessageHandler);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    /*jshint newcap:false */
    /*global $, define*/
    ;
    module.exports = exports['default'];
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
