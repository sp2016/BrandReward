<?php
class Payments extends LibFactory{
    function getPayments($opts,$page=1,$page_size=50){
        $orderby = isset($opts['orderby'])?'ORDER BY '.$opts['orderby']:'ORDER BY PaidTime desc';
        $limit = '';
        if($page>0){
            $limit = ' LIMIT '.($page-1)*$page_size.','.$page_size;     
        }
        $where_arr = array();
        if(isset($opts['publisher']) && !empty($opts['publisher'])){
            $data = $opts['publisher'];
            $sql = "select  a.`ID` from publisher as a left join publisher_account as b on a.ID=b.PublisherId
                      where b.Alias LIKE '%$data%' OR a.`Name` LIKE '%$data%' OR a.`Domain` LIKE '%$data%' 
                      OR a.`Email` LIKE '%$data%' OR a.`UserName` LIKE '%$data%' OR b.`Domain` LIKE '%$data%' 
                      OR b.`Apikey` LIKE '%$data%' group by a.`ID`";
            $rows = $this->getRows($sql);
            $ids = _array_column($rows,'ID');
            $where_arr[] = " PublisherId IN (".join(',',$ids).")";
        }

        if(isset($opts['paidmonth']) && !empty($opts['paidmonth'])){
            $where_arr[] = " LEFT(PaidDate,7) = '".$opts['paidmonth']."'";
        }
        if(isset($opts['transactionid']) && !empty($opts['transactionid'])){
            $where_arr[] = " TransactionId = '".$opts['transactionid']."'";
        }

        $where = !empty($where_arr)?' WHERE '.join(' AND ',$where_arr):'';

        if(isset($opts['return_t']) && $opts['return_t'] == 'pagination'){
            $sql = "SELECT COUNT(*) as c FROM payments ".$where;
            $row = $this->objMysql->getFirstRow($sql);
            $return['page_now'] = $page;
            $return['page_total'] = ceil($row['c']/$page_size);
            $return['total'] = $row['c'];
        }else{
            $sql = "SELECT * FROM payments ".$where.$orderby.$limit;
            $rows = $this->getRows($sql);

            $publisherids = _array_column($rows,'PublisherId');
            $sites = _array_column($rows,'Site');

            $sql = "SELECT * FROM publisher WHERE ID IN (".join(',',$publisherids).")";
            $rows_publisher = $this->getRows($sql);
            $tmp_key = _array_column($rows_publisher,'ID');
            $map_publisher = array_combine($tmp_key,$rows_publisher);

            $sql = "SELECT * FROM publisher_account WHERE ApiKey IN ('".join("','",$sites)."')";
            $rows_sites = $this->getRows($sql);
            $tmp_key = _array_column($rows_sites,'ApiKey');
            $map_site = array_combine($tmp_key,$rows_sites);

            foreach($rows as $k=>$v){
                $rows[$k]['publisher'] = $map_publisher[$v['PublisherId']];
                $rows[$k]['account'] = $map_site[$v['Site']];
                $rows[$k]['PaymentDetail'] = str_replace("\n","<br>",$v['PaymentDetail']);
            }
            
            $return = $rows;
        }

        return $return;
    }


    function getPaymentsBatchTime($datetype='day'){
        $sql = "SELECT DISTINCT(PaidDate) as PaidDate FROM payments ";
        $rows = $this->getRows($sql);

        $paidBatch_list = _array_column($rows,'PaidDate');
        if($datetype == 'month'){
            foreach($paidBatch_list as $k=>$v){
                $paidBatch_list[$k] = substr($v,0,7);
            }
        }
        rsort($paidBatch_list);
        return $paidBatch_list;
    }

    function nextPaymentTotal($next_payment_date){
        $where = $this->get_pending_transaction_where($next_payment_date);
        $sql = "SELECT Site,SUM(showcommission) as commission FROM rpt_transaction_unique WHERE ".$where." AND Site != '0c74b7f78409a4022a2c4c5a5ca3ee19' AND Site != '072b030ba126b2f4b2374f342be9ed44' AND Site NOT IN (SELECT Site FROM payments WHERE PaidDate = '".$next_payment_date."') GROUP BY Site HAVING commission > 10";
        $list = $this->getRows($sql);
        $sites = _array_column($list,'Site');
        
        $sql = "SELECT a.Manager,b.`PublisherId`,b.`ApiKey`,b.`Domain`,a.`Name`,a.`Email`,a.`PayPal`,a.`AccountName`,a.`AccountNumber`,a.`AccountAddress`,a.`BankName`,a.`BranchName`,a.`SwiftCode` FROM publisher AS a LEFT JOIN publisher_account AS b ON a.ID = b.PublisherId WHERE b.ApiKey IN ('".join("','",$sites)."')";
        $rows = $this->getRows($sql);
        $tmp_keys = _array_column($rows,'ApiKey');
        $map_publisher = array_combine($tmp_keys,$rows);
        
        foreach($list as $k=>$v){
            $list[$k]['Manager'] = $map_publisher[$v['Site']]['Manager'];
            $list[$k]['PublisherId'] = $map_publisher[$v['Site']]['PublisherId'];
            $list[$k]['Domain'] = $map_publisher[$v['Site']]['Domain'];
            $list[$k]['Name'] = $map_publisher[$v['Site']]['Name'];
            $list[$k]['Email'] = $map_publisher[$v['Site']]['Email'];
            $list[$k]['PayPal'] = $map_publisher[$v['Site']]['PayPal'];
            $list[$k]['AccountName'] = $map_publisher[$v['Site']]['AccountName'];
            $list[$k]['AccountNumber'] = $map_publisher[$v['Site']]['AccountNumber'];
            $list[$k]['AccountAddress'] = $map_publisher[$v['Site']]['AccountAddress'];
            $list[$k]['BankName'] = $map_publisher[$v['Site']]['BankName'];
            $list[$k]['BranchName'] = $map_publisher[$v['Site']]['BranchName'];
            $list[$k]['SwiftCode'] = $map_publisher[$v['Site']]['SwiftCode'];
        }
        $tmp_sort_keys = _array_column($list,'PublisherId');
        array_multisort($tmp_sort_keys,SORT_ASC,$list);
        return $list;
    }

    function nextSitePaymentList($opts,$page=1,$page_size=50){
        $return = array();
        if(!empty($return))
            return $return;
        
        $y = date('Y',strtotime($opts['next_payment_date']));
        $m = date('m',strtotime($opts['next_payment_date']));
        if($m == '01'){
            $y_p = $y - 1;
            $m_p = '12';
        }else{
            $y_p = $y;
            $m_p = $m - 1;
            if($m_p < 10)
                $m_p = '0'.$m_p;
        }
        $date = $y_p.'-'.$m_p.'-01';
        
        $opts['toCreatedDate'] = $date;
        $list = $this->getPaymentsInvoice($opts,$page,$page_size);
        $opts['rtype'] = 'pagination';
        $pagination = $this->getPaymentsInvoice($opts,$page,$page_size);
        $statis = $this->getPaymentsStatis($opts);
        $return['list'] = $list;
        $return['pagination'] = $pagination;
        $return['statis'] = $statis;
        return $return; 
    }

    function getPaymentsInvoice($opts,$page=1,$page_size=50){
        $return = array();
        $where = array();
        if(isset($opts['toCreatedDate']) && !empty($opts['toCreatedDate'])){
            $where[] = "CreatedDate < '".$date."'";
        }
        if(isset($opts['nopay']) && !empty($opts['nopay'])){
            $where[] = "PaidDate = '0000-00-00'";
        }
        if(isset($opts['hastax']) && !empty($opts['hastax'])){
            $where[] = "Tax > 0";
        }
        if(isset($opts['site']) && !empty($opts['site'])){
            $where[] = "Site = '".addslashes($site)."'";
        }
        $where_str = !empty($where)?' WHERE '.join(' AND ',$where):'';
        $orderby = " ORDER BY ID DESC";
        $limit  = " LIMIT ".($page-1)*$page_size.",".$page_size;
        if(isset($opts['rtype']) && $opts['rtype'] == 'pagination'){
            $sql = "SELECT COUNT(*) as c FROM rpt_transaction_unique ".$where_str;
            $row = $this->objMysql->getFirstRow($sql);

            $return['page_now'] = $page;
            $return['page_total'] = ceil($row['c']/$page_size);
            $return['total'] = $row['c'];
        }else{
            $sql = "SELECT Created,Visited,AffId,Sales,ShowCommission FROM rpt_transaction_unique ".$where_str;
            $rows = $this->getRows($sql);
        }
    }

    function getPaymentsStatis($opts){
        $return = array();
        $where = array();
        if(isset($opts['toCreatedDate']) && !empty($opts['toCreatedDate'])){
            $where[] = "CreatedDate < '".$date."'";
        }
        if(isset($opts['nopay']) && !empty($opts['nopay'])){
            $where[] = "PaidDate = '0000-00-00'";
        }
        if(isset($opts['hastax']) && !empty($opts['hastax'])){
            $where[] = "Tax > 0";
        }
        if(isset($opts['site']) && !empty($opts['site'])){
            $where[] = "Site = '".addslashes($site)."'";
        }
        
        $where_str = !empty($where)?' WHERE '.join(' AND ',$where):'';
        $sql = "SELECT SUM(showcommission) as commission,COUNT(*) as orders FROM rpt_transaction_unique".$where_str;
        $row = $this->getFirstRow($sql);
        $return['total'] = $row;

        $sql = "SELECT country,SUM(showcommission) as commission,COUNT(*) as orders FROM rpt_transaction_unique".$where_str." GROUP BY country";
        $return['country'] = $this->getRows($sql);

        $sql = "SELECT AffId,SUM(showcommission) as commission,COUNT(*) as orders FROM rpt_transaction_unique".$where_str." GROUP BY AffId";
        $rows = $this->getRows($sql);

        $affids = _array_column($rows);
        $sql = "SELECT ID,Name FROM wf_aff WHERE ID IN (".join(',',$affids).")";
        $tmp_rows = $this->getRows($sql);
        $tmp_keys = _array_column($tmp_rows,'ID');
        $map_network = array_combine($tmp_keys,$tmp_rows);
        foreach($rows as $k=>$v){
            $rows[$k]['network'] = isset($map_network[$v['AffId']])?$map_network[$v['AffId']]['Name']:'';
        }
        $return['network'] = $rows;
        return $return;
    }
   
    function groupPaymentInfo($data){
         $return = array();
         foreach($data as $k=>$v){
             if(!empty($v['AccountNumber'])){
                 $key = md5($v['AccountName'].$v['AccountNumber'].$v['AccountAddress'].$v['BankName'].$v['BranchName'].$v['SwiftCode']);
             }else{
                 $key = md5($v['PayPal']);
             }
             $return[$key]['detail'][] = $v;
             if(!isset($return[$key])){
                 $return[$key]['sum'] = $v['commission'];
                 $return[$key]['count'] = 1;
             }else{
                 $return[$key]['sum'] = bcadd($return[$key]['sum'],$v['commission'],2);
                 $return[$key]['count']++;
             }
         }
         
         $tmp_key_count = _array_column($return,'count'); 
         $tmp_key_sum = _array_column($return,'sum'); 
         array_multisort($tmp_key_count,SORT_ASC,$tmp_key_sum,SORT_ASC,$return);
         return $return;
    }
    
    function save_next_payments($opts){
        $next_payment_date = $opts['PaidDate'];
        $payments_data_total = $this->nextPaymentTotal($next_payment_date);
        $payments_data_group = $this->groupPaymentInfo($payments_data_total);
        
        $payments_detail = $payments_data_group[$opts['GroupId']];
        $where = $this->get_pending_transaction_where($next_payment_date);
        $sql_payments_invoice = "INSERT INTO payments_invoice(CreatedDate,VisitedDate,PaidDate,BRID,Commission,Site,Af,AffId,programId,domainId) SELECT CreatedDate,VisitedDate,'".$next_payment_date."',BRID,ShowCommission,Site,Af,AffId,programId,domainId FROM rpt_transaction_unique WHERE ".$where." AND Site IN ('".join("','",$opts['Site'])."')";
        $sql_payments = "INSERT INTO payments (Amount,Currency,PublisherId,Site,CreateTime,PaidTime,`Status`,EmailSend,PaymentType,PaymentDetail,TransactionId,GroupId,PaidDate) values ";
        foreach($payments_detail['detail'] as $k=>$v){
            if($opts['PaymentType'] == 'bank'){
                $PaymentDetail = 'Account Name: '.$v['AccountName']."\n".'Account Number: '.$v['AccountNumber']."\n".'Account Address: '.$v['AccountAddress']."\n".'Swift Code: '.$v['SwiftCode']."\n".'Bank Name: '.$v['BankName']."\n".'Branch Name: '.$v['BranchName'];
            }else{
                $PaymentDetail = $v['PayPal'];
            }
            $sql_payments .= " (".$v['commission'].",'USD',".$v['PublisherId'].",'".$v['Site']."','".date('Y-m-d H:i:s')."','".$opts['PaidTime']."','confirmed','no','".$opts['PaymentType']."','".$PaymentDetail."','".$opts['TransactionId']."','".$opts['GroupId']."','".$opts['PaidDate']."'),";
        }
        $sql_payments = rtrim($sql_payments,',');
echo $sql_payments;exit();
        //$rs = $this->query($sql_payments);
        if($rs){
            //$rs = $this->query($sql_payments_invoice);
            $sql = "UPDATE rpt_transaction_unique SET PaidDate = '".$next_payment_date."' WHERE ".$where." AND Site IN ('".join("','",$opts['Site'])."')";
            //$this->query($sql);
        }
        return $rs;
    }

    function get_pending_transaction_where($next_payment_date){
        $y = date('Y',strtotime($next_payment_date));
        $m = date('m',strtotime($next_payment_date));
        if($m == '01'){
            $y_p = $y - 1;
            $m_p = '12';
        }else{
            $y_p = $y;
            $m_p = $m - 1;
            if($m_p < 10)
                $m_p = '0'.$m_p;
        }
        $date = $y_p.'-'.$m_p.'-01';
        $where = "CreatedDate < '".$date."' AND PaidDate = '0000-00-00' AND Tax > 0";
        return $where; 
    }

    function get_payment_date($point='next'){
        $month = '';
        $thisMonth = date('Y-m');
        if($point == 'this'){
            $month = date('Y-m');
        }elseif($point == 'next'){
            $y = date('Y');
            $m = date('m');
            if($m == '12'){
                $m = 1;
                $y = $y+1;
            }else{
                $m = $m+1;
            }
            if($m < 10)
                $m = '0'.$m;
            $month = $y.'-'.$m;
        }elseif($point == 'prev'){
            $y = date('Y');
            $m = date('m');
            if($m == 1){
                $m = 12;
                $y = $y - 1;
            }else{
                $m = $m - 1;
            }
            if($m < 10)
                $m = '0'.$m;
            $month = $y.'-'.$m;
        }
        $month_lastday = date('Y-m-t',strtotime($month.'-01'));
        $objD = new Datetime($month_lastday);
        while($objD->format('w') < 1 || $objD->format('w') > 5){
            $objD->modify('-1 day');
        }
        $payment_date = $objD->format('Y-m-d');
        return $payment_date;
    }
    
    function getPaymentsStatisByPublisher($opts){
        $orderby = isset($opts['orderby'])&&!empty($opts['orderby'])?' ORDER BY '.str_replace('-',' ',$opts['orderby']):' ORDER BY PublisherId ASC';
        $where = array();
        if(isset($opts['paidmonth']) && !empty($opts['paidmonth'])){
            $where[] = "LEFT(PaidDate,7) = '".$opts['paidmonth']."'";
        }

        $where_str = !empty($where)?' WHERE '.join(' AND ',$where):'';
        $sql = "SELECT PublisherId,SUM(Amount) as Amount FROM payments ".$where_str." GROUP BY PublisherId".$orderby;
        $rows = $this->getRows($sql);
        
        if(!empty($rows)){
            $pids = _array_column($rows,'PublisherId');
            $sql = "SELECT * FROM publisher WHERE ID IN (".join(',',$pids).")";
            $rows_publisher = $this->getRows($sql);
            $map_key = _array_column($rows_publisher,'ID');
            $map_publisher = array_combine($map_key,$rows_publisher);

            foreach($rows as $k=>$v){
                $rows[$k]['publisher'] = $map_publisher[$v['PublisherId']];
            } 
        }
        return $rows;
    }

    function getPaymentsHistoryByPublisher($opts){
        $orderby = isset($opts['orderby'])&&!empty($opts['orderby'])?' ORDER BY '.str_replace('-',' ',$opts['orderby']):' ORDER BY PublisherId ASC';
        $where = array();
        if(isset($opts['paidmonth']) && !empty($opts['paidmonth'])){
            $where[] = "LEFT(PaidDate,7) = '".$opts['paidmonth']."'";
        }

        $where_str = !empty($where)?' WHERE '.join(' AND ',$where):'';
        $sql = "SELECT PublisherId,SUM(Amount) as Amount FROM payments ".$where_str." GROUP BY PublisherId".$orderby;
        $rows = $this->getRows($sql);
        
        if(!empty($rows)){
            $pids = _array_column($rows,'PublisherId');
            $sql = "SELECT * FROM publisher WHERE ID IN (".join(',',$pids).")";
            $rows_publisher = $this->getRows($sql);
            $map_key = _array_column($rows_publisher,'ID');
            $map_publisher = array_combine($map_key,$rows_publisher);

            foreach($rows as $k=>$v){
                $rows[$k]['publisher'] = $map_publisher[$v['PublisherId']];
            } 
        }
        return $rows;
    }
}
